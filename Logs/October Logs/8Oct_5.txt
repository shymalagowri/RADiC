  0%|          | 0/500 [00:00<?, ?it/s]  0%|          | 0/500 [00:01<?, ?it/s, accuracy=1]  0%|          | 1/500 [00:01<11:23,  1.37s/it, accuracy=1]  0%|          | 1/500 [00:01<11:23,  1.37s/it, accuracy=0.625]  0%|          | 1/500 [00:01<11:23,  1.37s/it, accuracy=0.583]  0%|          | 1/500 [00:01<11:23,  1.37s/it, accuracy=0.625]  1%|          | 4/500 [00:01<02:25,  3.41it/s, accuracy=0.625]  1%|          | 4/500 [00:01<02:25,  3.41it/s, accuracy=0.65]   1%|          | 4/500 [00:01<02:25,  3.41it/s, accuracy=0.708]  1%|          | 4/500 [00:01<02:25,  3.41it/s, accuracy=0.714]  1%|▏         | 7/500 [00:01<01:17,  6.39it/s, accuracy=0.714]  1%|▏         | 7/500 [00:01<01:17,  6.39it/s, accuracy=0.688]  1%|▏         | 7/500 [00:01<01:17,  6.39it/s, accuracy=0.667]  1%|▏         | 7/500 [00:01<01:17,  6.39it/s, accuracy=0.65]   1%|▏         | 7/500 [00:01<01:17,  6.39it/s, accuracy=0.659]  2%|▏         | 11/500 [00:01<00:45, 10.69it/s, accuracy=0.659]  2%|▏         | 11/500 [00:01<00:45, 10.69it/s, accuracy=0.667]  2%|▏         | 11/500 [00:01<00:45, 10.69it/s, accuracy=0.654]  2%|▏         | 11/500 [00:01<00:45, 10.69it/s, accuracy=0.679]  2%|▏         | 11/500 [00:01<00:45, 10.69it/s, accuracy=0.667]  3%|▎         | 15/500 [00:01<00:32, 14.73it/s, accuracy=0.667]/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/nn/functional.py:2976: UserWarning: reduction: 'mean' divides the total loss by both the batch size and the support size.'batchmean' divides only by the batch size, and aligns with the KL div math definition.'mean' will be changed to behave the same as 'batchmean' in the next major release.
  warnings.warn(
  3%|▎         | 15/500 [00:04<00:32, 14.73it/s, accuracy=0.656]  3%|▎         | 15/500 [00:04<00:32, 14.73it/s, accuracy=0.632]  3%|▎         | 15/500 [00:04<00:32, 14.73it/s, accuracy=0.597]  4%|▎         | 18/500 [00:04<02:41,  2.98it/s, accuracy=0.597]  4%|▎         | 18/500 [00:04<02:41,  2.98it/s, accuracy=0.579]  4%|▎         | 18/500 [00:04<02:41,  2.98it/s, accuracy=0.55]   4%|▎         | 18/500 [00:04<02:41,  2.98it/s, accuracy=0.536]  4%|▍         | 21/500 [00:04<01:56,  4.10it/s, accuracy=0.536]  4%|▍         | 21/500 [00:04<01:56,  4.10it/s, accuracy=0.523]  4%|▍         | 21/500 [00:04<01:56,  4.10it/s, accuracy=0.5]    4%|▍         | 21/500 [00:04<01:56,  4.10it/s, accuracy=0.479]  5%|▍         | 24/500 [00:04<01:25,  5.54it/s, accuracy=0.479]  5%|▍         | 24/500 [00:04<01:25,  5.54it/s, accuracy=0.46]   5%|▍         | 24/500 [00:04<01:25,  5.54it/s, accuracy=0.442]  5%|▍         | 24/500 [00:04<01:25,  5.54it/s, accuracy=0.435]  5%|▌         | 27/500 [00:04<01:04,  7.33it/s, accuracy=0.435]  5%|▌         | 27/500 [00:05<01:04,  7.33it/s, accuracy=0.42]   5%|▌         | 27/500 [00:05<01:04,  7.33it/s, accuracy=0.405]  5%|▌         | 27/500 [00:05<01:04,  7.33it/s, accuracy=0.408]  6%|▌         | 30/500 [00:05<00:49,  9.50it/s, accuracy=0.408]  6%|▌         | 30/500 [00:05<00:49,  9.50it/s, accuracy=0.403]  6%|▌         | 30/500 [00:09<00:49,  9.50it/s, accuracy=0.398]  6%|▌         | 30/500 [00:09<00:49,  9.50it/s, accuracy=0.402]  7%|▋         | 33/500 [00:09<03:55,  1.99it/s, accuracy=0.402]  7%|▋         | 33/500 [00:09<03:55,  1.99it/s, accuracy=0.39]   7%|▋         | 33/500 [00:09<03:55,  1.99it/s, accuracy=0.386]  7%|▋         | 33/500 [00:09<03:55,  1.99it/s, accuracy=0.382]  7%|▋         | 36/500 [00:09<02:48,  2.76it/s, accuracy=0.382]  7%|▋         | 36/500 [00:09<02:48,  2.76it/s, accuracy=0.378]  7%|▋         | 36/500 [00:09<02:48,  2.76it/s, accuracy=0.368]  7%|▋         | 36/500 [00:09<02:48,  2.76it/s, accuracy=0.359]  8%|▊         | 39/500 [00:09<02:01,  3.79it/s, accuracy=0.359]  8%|▊         | 39/500 [00:09<02:01,  3.79it/s, accuracy=0.35]   8%|▊         | 39/500 [00:09<02:01,  3.79it/s, accuracy=0.341]  8%|▊         | 39/500 [00:09<02:01,  3.79it/s, accuracy=0.339]  8%|▊         | 42/500 [00:09<01:29,  5.14it/s, accuracy=0.339]  8%|▊         | 42/500 [00:09<01:29,  5.14it/s, accuracy=0.331]  8%|▊         | 42/500 [00:09<01:29,  5.14it/s, accuracy=0.33]   8%|▊         | 42/500 [00:09<01:29,  5.14it/s, accuracy=0.328]  9%|▉         | 45/500 [00:09<01:06,  6.84it/s, accuracy=0.328]  9%|▉         | 45/500 [00:09<01:06,  6.84it/s, accuracy=0.321]  9%|▉         | 45/500 [00:09<01:06,  6.84it/s, accuracy=0.319]  9%|▉         | 45/500 [00:15<01:06,  6.84it/s, accuracy=0.318] 10%|▉         | 48/500 [00:15<05:04,  1.49it/s, accuracy=0.318] 10%|▉         | 48/500 [00:15<05:04,  1.49it/s, accuracy=0.316] 10%|▉         | 48/500 [00:15<05:04,  1.49it/s, accuracy=0.31]  10%|▉         | 48/500 [00:15<05:04,  1.49it/s, accuracy=0.304] 10%|█         | 51/500 [00:15<03:36,  2.08it/s, accuracy=0.304] 10%|█         | 51/500 [00:15<03:36,  2.08it/s, accuracy=0.298] 10%|█         | 51/500 [00:15<03:36,  2.08it/s, accuracy=0.302] 10%|█         | 51/500 [00:15<03:36,  2.08it/s, accuracy=0.301] 11%|█         | 54/500 [00:15<02:35,  2.87it/s, accuracy=0.301] 11%|█         | 54/500 [00:15<02:35,  2.87it/s, accuracy=0.295] 11%|█         | 54/500 [00:15<02:35,  2.87it/s, accuracy=0.29]  11%|█         | 54/500 [00:15<02:35,  2.87it/s, accuracy=0.289] 11%|█▏        | 57/500 [00:15<01:52,  3.94it/s, accuracy=0.289] 11%|█▏        | 57/500 [00:15<01:52,  3.94it/s, accuracy=0.284] 11%|█▏        | 57/500 [00:15<01:52,  3.94it/s, accuracy=0.28]  11%|█▏        | 57/500 [00:15<01:52,  3.94it/s, accuracy=0.279] 12%|█▏        | 60/500 [00:15<01:22,  5.32it/s, accuracy=0.279] 12%|█▏        | 60/500 [00:15<01:22,  5.32it/s, accuracy=0.283] 12%|█▏        | 60/500 [00:15<01:22,  5.32it/s, accuracy=0.282] 12%|█▏        | 60/500 [00:15<01:22,  5.32it/s, accuracy=0.282] 13%|█▎        | 63/500 [00:15<01:02,  7.03it/s, accuracy=0.282] 13%|█▎        | 63/500 [00:22<01:02,  7.03it/s, accuracy=0.277] 13%|█▎        | 63/500 [00:22<01:02,  7.03it/s, accuracy=0.277] 13%|█▎        | 63/500 [00:22<01:02,  7.03it/s, accuracy=0.273] 13%|█▎        | 66/500 [00:22<05:38,  1.28it/s, accuracy=0.273] 13%|█▎        | 66/500 [00:22<05:38,  1.28it/s, accuracy=0.272] 13%|█▎        | 66/500 [00:22<05:38,  1.28it/s, accuracy=0.272] 13%|█▎        | 66/500 [00:22<05:38,  1.28it/s, accuracy=0.268] 14%|█▍        | 69/500 [00:22<04:00,  1.79it/s, accuracy=0.268] 14%|█▍        | 69/500 [00:22<04:00,  1.79it/s, accuracy=0.264] 14%|█▍        | 69/500 [00:22<04:00,  1.79it/s, accuracy=0.261] 14%|█▍        | 69/500 [00:23<04:00,  1.79it/s, accuracy=0.26]  14%|█▍        | 72/500 [00:23<02:51,  2.49it/s, accuracy=0.26] 14%|█▍        | 72/500 [00:23<02:51,  2.49it/s, accuracy=0.257] 14%|█▍        | 72/500 [00:23<02:51,  2.49it/s, accuracy=0.26]  14%|█▍        | 72/500 [00:23<02:51,  2.49it/s, accuracy=0.26] 15%|█▌        | 75/500 [00:23<02:03,  3.44it/s, accuracy=0.26] 15%|█▌        | 75/500 [00:23<02:03,  3.44it/s, accuracy=0.257] 15%|█▌        | 75/500 [00:23<02:03,  3.44it/s, accuracy=0.26]  15%|█▌        | 75/500 [00:23<02:03,  3.44it/s, accuracy=0.256] 16%|█▌        | 78/500 [00:23<01:30,  4.67it/s, accuracy=0.256] 16%|█▌        | 78/500 [00:23<01:30,  4.67it/s, accuracy=0.253] 16%|█▌        | 78/500 [00:30<01:30,  4.67it/s, accuracy=0.253] 16%|█▌        | 78/500 [00:30<01:30,  4.67it/s, accuracy=0.253] 16%|█▌        | 81/500 [00:30<05:51,  1.19it/s, accuracy=0.253] 16%|█▌        | 81/500 [00:30<05:51,  1.19it/s, accuracy=0.25]  16%|█▌        | 81/500 [00:30<05:51,  1.19it/s, accuracy=0.247] 16%|█▌        | 81/500 [00:30<05:51,  1.19it/s, accuracy=0.244] 17%|█▋        | 84/500 [00:30<04:08,  1.67it/s, accuracy=0.244] 17%|█▋        | 84/500 [00:30<04:08,  1.67it/s, accuracy=0.241] 17%|█▋        | 84/500 [00:30<04:08,  1.67it/s, accuracy=0.238] 17%|█▋        | 84/500 [00:30<04:08,  1.67it/s, accuracy=0.239] 17%|█▋        | 87/500 [00:30<02:57,  2.33it/s, accuracy=0.239] 17%|█▋        | 87/500 [00:30<02:57,  2.33it/s, accuracy=0.239] 17%|█▋        | 87/500 [00:30<02:57,  2.33it/s, accuracy=0.236] 17%|█▋        | 87/500 [00:30<02:57,  2.33it/s, accuracy=0.233] 18%|█▊        | 90/500 [00:30<02:07,  3.21it/s, accuracy=0.233] 18%|█▊        | 90/500 [00:30<02:07,  3.21it/s, accuracy=0.231] 18%|█▊        | 90/500 [00:30<02:07,  3.21it/s, accuracy=0.228] 18%|█▊        | 90/500 [00:30<02:07,  3.21it/s, accuracy=0.231] 19%|█▊        | 93/500 [00:30<01:33,  4.36it/s, accuracy=0.231] 19%|█▊        | 93/500 [00:30<01:33,  4.36it/s, accuracy=0.229] 19%|█▊        | 93/500 [00:30<01:33,  4.36it/s, accuracy=0.226] 19%|█▊        | 93/500 [00:37<01:33,  4.36it/s, accuracy=0.224] 19%|█▉        | 96/500 [00:37<05:55,  1.14it/s, accuracy=0.224] 19%|█▉        | 96/500 [00:37<05:55,  1.14it/s, accuracy=0.224] 19%|█▉        | 96/500 [00:37<05:55,  1.14it/s, accuracy=0.222] 19%|█▉        | 96/500 [00:37<05:55,  1.14it/s, accuracy=0.222] 20%|█▉        | 99/500 [00:37<04:11,  1.59it/s, accuracy=0.222] 20%|█▉        | 99/500 [00:37<04:11,  1.59it/s, accuracy=0.22]  20%|█▉        | 99/500 [00:37<04:11,  1.59it/s, accuracy=0.218] 20%|█▉        | 99/500 [00:37<04:11,  1.59it/s, accuracy=0.218] 20%|██        | 102/500 [00:37<02:59,  2.21it/s, accuracy=0.218] 20%|██        | 102/500 [00:38<02:59,  2.21it/s, accuracy=0.216] 20%|██        | 102/500 [00:38<02:59,  2.21it/s, accuracy=0.214] 20%|██        | 102/500 [00:38<02:59,  2.21it/s, accuracy=0.212] 21%|██        | 105/500 [00:38<02:09,  3.05it/s, accuracy=0.212] 21%|██        | 105/500 [00:38<02:09,  3.05it/s, accuracy=0.21]  21%|██        | 105/500 [00:38<02:09,  3.05it/s, accuracy=0.208] 21%|██        | 105/500 [00:38<02:09,  3.05it/s, accuracy=0.208] 22%|██▏       | 108/500 [00:38<01:38,  3.98it/s, accuracy=0.208] 22%|██▏       | 108/500 [00:38<01:38,  3.98it/s, accuracy=0.206] 22%|██▏       | 108/500 [00:38<01:38,  3.98it/s, accuracy=0.207] 22%|██▏       | 108/500 [00:38<01:38,  3.98it/s, accuracy=0.209] 22%|██▏       | 111/500 [00:38<01:12,  5.34it/s, accuracy=0.209] 22%|██▏       | 111/500 [00:39<02:20,  2.78it/s, accuracy=0.209]
Traceback (most recent call last):
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/main.py", line 57, in <module>
    main()
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/main.py", line 54, in main
    testTimeAdaptation(student, teacher, dataset_dir, attack)
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/main.py", line 41, in testTimeAdaptation
    evaluate_tta(loader, tta_model, 'RoTTA+ADaaD2', attack_type)
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/helper.py", line 73, in evaluate_tta
    output = tta_model(images)
             ^^^^^^^^^^^^^^^^^
  File "/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/base_adapter.py", line 22, in forward
    outputs = self.forward_and_adapt(x, self.model, self.optimizer)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/rotta.py", line 40, in forward_and_adapt
    self.update_model(model, optimizer)
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/rotta.py", line 47, in update_model
    x_adv = self.adaad_inner_loss(student, self.teacher, x_nat, self.attack)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/rotta.py", line 86, in adaad_inner_loss
    return pgd_kl(model, teacher_model, x_natural, step_size, steps, epsilon, BN_eval, random_init, clip_min, clip_max)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/Documents/RoTTA Enhancement/RoTTA/AT.py", line 64, in pgd_kl
    grad = torch.autograd.grad(loss_kl, [x_adv])[0]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/autograd/__init__.py", line 412, in grad
    result = _engine_run_backward(
             ^^^^^^^^^^^^^^^^^^^^^
  File "/home/project/miniconda3/envs/tta/lib/python3.12/site-packages/torch/autograd/graph.py", line 744, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 40.00 MiB. GPU 
